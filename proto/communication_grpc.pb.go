// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/communication.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *MessageS, opts ...grpc.CallOption) (*MessageR, error)
	SubscribeMessage(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (ChatService_SubscribeMessageClient, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *MessageS, opts ...grpc.CallOption) (*MessageR, error) {
	out := new(MessageR)
	err := c.cc.Invoke(ctx, "/ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SubscribeMessage(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (ChatService_SubscribeMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/ChatService/SubscribeMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeMessageClient interface {
	Recv() (*SubMessage, error)
	grpc.ClientStream
}

type chatServiceSubscribeMessageClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeMessageClient) Recv() (*SubMessage, error) {
	m := new(SubMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	SendMessage(context.Context, *MessageS) (*MessageR, error)
	SubscribeMessage(*SubRequest, ChatService_SubscribeMessageServer) error
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) SendMessage(context.Context, *MessageS) (*MessageR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatServiceServer) SubscribeMessage(*SubRequest, ChatService_SubscribeMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMessage not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*MessageS))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SubscribeMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeMessage(m, &chatServiceSubscribeMessageServer{stream})
}

type ChatService_SubscribeMessageServer interface {
	Send(*SubMessage) error
	grpc.ServerStream
}

type chatServiceSubscribeMessageServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeMessageServer) Send(m *SubMessage) error {
	return x.ServerStream.SendMsg(m)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMessage",
			Handler:       _ChatService_SubscribeMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/communication.proto",
}

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	SendCommand(ctx context.Context, in *CommandS, opts ...grpc.CallOption) (*CommandR, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) SendCommand(ctx context.Context, in *CommandS, opts ...grpc.CallOption) (*CommandR, error) {
	out := new(CommandR)
	err := c.cc.Invoke(ctx, "/CommandService/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	SendCommand(context.Context, *CommandS) (*CommandR, error)
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) SendCommand(context.Context, *CommandS) (*CommandR, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommandService/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).SendCommand(ctx, req.(*CommandS))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _CommandService_SendCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/communication.proto",
}

// AnnouncementServiceClient is the client API for AnnouncementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnnouncementServiceClient interface {
	SendAnnouncement(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (AnnouncementService_SendAnnouncementClient, error)
}

type announcementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnnouncementServiceClient(cc grpc.ClientConnInterface) AnnouncementServiceClient {
	return &announcementServiceClient{cc}
}

func (c *announcementServiceClient) SendAnnouncement(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (AnnouncementService_SendAnnouncementClient, error) {
	stream, err := c.cc.NewStream(ctx, &AnnouncementService_ServiceDesc.Streams[0], "/AnnouncementService/SendAnnouncement", opts...)
	if err != nil {
		return nil, err
	}
	x := &announcementServiceSendAnnouncementClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AnnouncementService_SendAnnouncementClient interface {
	Recv() (*SubAnnouncement, error)
	grpc.ClientStream
}

type announcementServiceSendAnnouncementClient struct {
	grpc.ClientStream
}

func (x *announcementServiceSendAnnouncementClient) Recv() (*SubAnnouncement, error) {
	m := new(SubAnnouncement)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AnnouncementServiceServer is the server API for AnnouncementService service.
// All implementations must embed UnimplementedAnnouncementServiceServer
// for forward compatibility
type AnnouncementServiceServer interface {
	SendAnnouncement(*SubRequest, AnnouncementService_SendAnnouncementServer) error
	mustEmbedUnimplementedAnnouncementServiceServer()
}

// UnimplementedAnnouncementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnnouncementServiceServer struct {
}

func (UnimplementedAnnouncementServiceServer) SendAnnouncement(*SubRequest, AnnouncementService_SendAnnouncementServer) error {
	return status.Errorf(codes.Unimplemented, "method SendAnnouncement not implemented")
}
func (UnimplementedAnnouncementServiceServer) mustEmbedUnimplementedAnnouncementServiceServer() {}

// UnsafeAnnouncementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnnouncementServiceServer will
// result in compilation errors.
type UnsafeAnnouncementServiceServer interface {
	mustEmbedUnimplementedAnnouncementServiceServer()
}

func RegisterAnnouncementServiceServer(s grpc.ServiceRegistrar, srv AnnouncementServiceServer) {
	s.RegisterService(&AnnouncementService_ServiceDesc, srv)
}

func _AnnouncementService_SendAnnouncement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnnouncementServiceServer).SendAnnouncement(m, &announcementServiceSendAnnouncementServer{stream})
}

type AnnouncementService_SendAnnouncementServer interface {
	Send(*SubAnnouncement) error
	grpc.ServerStream
}

type announcementServiceSendAnnouncementServer struct {
	grpc.ServerStream
}

func (x *announcementServiceSendAnnouncementServer) Send(m *SubAnnouncement) error {
	return x.ServerStream.SendMsg(m)
}

// AnnouncementService_ServiceDesc is the grpc.ServiceDesc for AnnouncementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnnouncementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnnouncementService",
	HandlerType: (*AnnouncementServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendAnnouncement",
			Handler:       _AnnouncementService_SendAnnouncement_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/communication.proto",
}
